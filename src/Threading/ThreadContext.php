<?php
namespace Icicle\Concurrent\Threading;

use Icicle\Concurrent\ContextInterface;
use Icicle\Concurrent\Exception\PanicError;
use Icicle\Concurrent\Sync\Channel;
use Icicle\Promise;

/**
 * Implements an execution context using native multi-threading.
 *
 * The thread context is not itself threaded. A local instance of the context is
 * maintained both in the context that creates the thread and in the thread
 * itself.
 */
class ThreadContext implements ContextInterface
{
    /**
     * @var Thread A thread instance.
     */
    public $thread;

    /**
     * @var Channel A channel for communicating with the thread.
     */
    private $channel;

    /**
     * @var bool Indicates if this context instance belongs to the thread.
     */
    private $isThread = true;

    /**
     * {@inheritdoc}
     */
    public static function create(callable $function)
    {
        $thread = new Thread($function);
        $thread->autoloaderPath = static::getComposerAutoloader();

        $context = new static($thread);
        $context->isThread = false;
        $context->deferredJoin = new Promise\Deferred(function () use ($context) {
            $context->kill();
        });

        return $context;
    }

    /**
     * Creates a new thread context from a thread.
     *
     * @param Thread $thread The thread object.
     */
    public function __construct(Thread $thread)
    {
        $this->thread = $thread;
    }

    /**
     * {@inheritdoc}
     */
    public function isRunning()
    {
        return $this->thread->isRunning();
    }

    /**
     * {@inheritdoc}
     */
    public function start()
    {
        $channels = Channel::create();
        $this->channel = new Channel($channels[1]);

        // Start the thread first. The thread will prepare the autoloader and
        // the event loop, and then notify us when the thread environment is
        // ready. If we don't do this first, objects will break when passed
        // to the thread, since the classes are not yet defined.
        $this->thread->start(PTHREADS_INHERIT_INI | PTHREADS_ALLOW_GLOBALS);

        // The thread must prepare itself first, so wait until the thread has
        // done so. We need to unlock ourselves while waiting to prevent
        // deadlocks if we somehow acquired the lock before the thread did.
        $this->thread->synchronized(function () {
            if (!$this->thread->prepared) {
                $this->thread->wait();
            }
        });

        // At this stage, the thread environment has been prepared, and we kept
        // the lock from above, so initialize the thread with the necessary
        // values to be copied over.
        $this->thread->synchronized(function () use ($channels) {
            $this->thread->init($channels[0]);
            $this->thread->notify();
        });
    }

    /**
     * {@inheritdoc}
     */
    public function kill()
    {
        $this->thread->kill();
    }

    /**
     * {@inheritdoc}
     */
    public function panic($message = '', $code = 0)
    {
        if ($this->isThread) {
            throw new PanicError($message, $code);
        } else {
            $this->kill();
        }
    }

    /**
     * {@inheritdoc}
     */
    public function join()
    {
        // Get an array of completion data from the thread when it finishes.
        $response = (yield $this->channel->receive());

        // If the status is not OK, bubble the problem up.
        if (!$response['ok']) {
            throw new PanicError($response['panic']['message'], $response['panic']['code'], $response['panic']['trace']);
        }

        $this->channel->close();
        $this->thread->join();

        yield $response['value'];
    }

    /**
     * {@inheritdoc}
     */
    public function lock()
    {
        $this->thread->lock();
    }

    /**
     * {@inheritdoc}
     */
    public function unlock()
    {
        $this->thread->unlock();
    }

    /**
     * {@inheritdoc}
     */
    public function synchronized(callable $callback)
    {
        $this->lock();

        try {
            $returnValue = $callback($this);
        } finally {
            $this->unlock();
        }

        return $returnValue;
    }

    /**
     * Gets the full path to the Composer autoloader.
     *
     * If no Composer autoloader is being used, `null` is returned.
     *
     * @return \Composer\Autoload\ClassLoader|null
     */
    private static function getComposerAutoloader()
    {
        foreach (get_included_files() as $path) {
            if (strpos($path, 'vendor/autoload.php') !== false) {
                $source = file_get_contents($path);
                if (strpos($source, '@generated by Composer') !== false) {
                    return $path;
                }
            }
        }

        // Find the Composer autoloader initializer class, and use it to fetch
        // the autoloader instance.
        /*foreach (get_declared_classes() as $name) {
        if (strpos($name, 'ComposerAutoloaderInit') === 0) {
        return $name::getLoader();
        }
        }*/

        return;
    }
}
